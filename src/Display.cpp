#include <Display.h>

const unsigned char logo [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x03, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x01, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x7f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x00, 0x0f, 0x80, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x3f, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x80, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x7f, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x01, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x01, 0xff, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x7f, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3e, 0x00, 0x1f, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xfc, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xfe, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0x80, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xc0, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xe0, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xf0, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

Display::Display() {
    SSD1306 = Adafruit_SSD1306(DISPLAY_WIDTH, DISPLAY_HEIGHT);
}

void Display::begin() {
    if (SSD1306.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDRESS)) {
        SSD1306.clearDisplay();
        SSD1306.setTextSize(3);
        SSD1306.setTextColor(WHITE);
        SSD1306.setTextWrap(false);
        SSD1306.setCursor(0, 0);
        SSD1306.display();
        delay(2000);
    }
}

void Display::drawLogo() {
    SSD1306.drawBitmap(0, 0, logo, 128, 64, BLACK, WHITE);
    SSD1306.display();
}

void Display::clear() {
    SSD1306.clearDisplay();
    SSD1306.display();
}

void Display::setBrightness(int8 value) {
    SSD1306.ssd1306_command(SSD1306_SETCONTRAST);
    SSD1306.ssd1306_command(value);
    delay(100);
}

void Display::writeText(String text) {
    Display::writeText(0, 0, DEFAULT_TEXT_SIZE, text);
 }

void Display::writeText(int16_t x, int16_t y, String text) {
    Display::writeText(x, y, DEFAULT_TEXT_SIZE, text);
}

void Display::writeText(int16_t x, int16_t y, int16_t size, String text) {
    SSD1306.setCursor(x, y);
    SSD1306.setTextSize(size);
    SSD1306.println(text);
    SSD1306.display();
}

uint16_t Display::getTextBounds(int16_t *size, String *text) {
    int16_t centeredX;
    int16_t centeredY;
    uint16_t textWidth;
    uint16_t textHeight;
    SSD1306.setTextSize(*size);
    SSD1306.getTextBounds(*text, 0, 0, &centeredX, &centeredY, &textWidth, &textHeight);
    return textWidth;
}

void Display::writeAlignedText(int16_t y, int16_t size, HorizontalAlignment alignment, String text) {
    if (alignment == HorizontalAlignment::CENTER) {
        uint16_t textWidth = getTextBounds(&size, &text);
        int16_t x = ((DISPLAY_WIDTH - textWidth) / 2);
        writeText(x, y, size, text);
    } else if (alignment == HorizontalAlignment::RIGHT) {
        uint16_t textWidth = getTextBounds(&size, &text);
        int16_t x = (DISPLAY_WIDTH - textWidth);
        writeText(x, y, size, text);
    } else if (alignment == HorizontalAlignment::LEFT) {
        writeText(0, y, size, text);
    }
}

void Display::writeText(char character) {
    Display::writeText(0, 0, DEFAULT_TEXT_SIZE, character);
 }

void Display::writeText(int16_t x, int16_t y, char character) {
    Display::writeText(x, y, DEFAULT_TEXT_SIZE, character);
}

void Display::writeText(int16_t x, int16_t y, int16_t size, char character) {
    SSD1306.setCursor(x, y);
    SSD1306.setTextSize(size);
    SSD1306.print(character);
    SSD1306.display();
}

void Display::drawPixel(int16_t x, int16_t y) {
    SSD1306.drawPixel(x, y, WHITE);
    SSD1306.display();
}

void Display::drawFile(String filePath, int x, int y, int width, int height) {
    int imageSizeInBytes = ((width * height) / 8);
    uint8_t originBuffer[imageSizeInBytes];
    readFile(filePath, originBuffer);

    SSD1306.clearDisplay();
    SSD1306.drawBitmap(x, y, (const uint8_t*)originBuffer, DISPLAY_WIDTH, DISPLAY_HEIGHT, WHITE);
    SSD1306.display();
}

void Display::draw() {
    SSD1306.display();
}

/*
    IMPORTANT: The file must have its rows order flipped.
*/
void Display::readFile(String filePath, uint8_t* buffer, int size) {
    File file = LittleFS.open(filePath, "r");
    int seek = file.size() - size - 2;
    file.seek(seek);
    file.read(buffer, size);
    file.close();
}

void Display::turnOn() {
    SSD1306.ssd1306_command(SSD1306_DISPLAYON);
    delay(100);
}

void Display::turnOff() {
    SSD1306.ssd1306_command(SSD1306_DISPLAYOFF);
    delay(100);
}

void Display::drawRoundedRect(int x, int y, int width, int height, int radious) {
    SSD1306.drawRoundRect(x, y, width, height, radious, WHITE);
}

void Display::fillRoundedRect(int x, int y, int width, int height, int radious) {
    SSD1306.fillRoundRect(x, y, width, height, radious, WHITE);
}